// Code generated by go-enum DO NOT EDIT.
// Version: 0.3.9
// Revision: 5a95b1bbcaf1f8f32542725929d84acdf48e0259
// Build Date: 2021-11-05T17:00:39Z
// Built By: goreleaser

package mlog

import (
	"fmt"
	"strings"
)

const (
	// UnknownLevel is a LogEventLevel of type UnknownLevel.
	UnknownLevel LogEventLevel = iota
	// DebugLevel is a LogEventLevel of type DebugLevel.
	DebugLevel
	// InfoLevel is a LogEventLevel of type InfoLevel.
	InfoLevel
	// WarnLevel is a LogEventLevel of type WarnLevel.
	WarnLevel
	// ErrorLevel is a LogEventLevel of type ErrorLevel.
	ErrorLevel
	// CriticalLevel is a LogEventLevel of type CriticalLevel.
	CriticalLevel
)

const _LogEventLevelName = "UnknownLevelDebugLevelInfoLevelWarnLevelErrorLevelCriticalLevel"

var _LogEventLevelMap = map[LogEventLevel]string{
	UnknownLevel:  _LogEventLevelName[0:12],
	DebugLevel:    _LogEventLevelName[12:22],
	InfoLevel:     _LogEventLevelName[22:31],
	WarnLevel:     _LogEventLevelName[31:40],
	ErrorLevel:    _LogEventLevelName[40:50],
	CriticalLevel: _LogEventLevelName[50:63],
}

// String implements the Stringer interface.
func (x LogEventLevel) String() string {
	if str, ok := _LogEventLevelMap[x]; ok {
		return str
	}
	return fmt.Sprintf("LogEventLevel(%d)", x)
}

var _LogEventLevelValue = map[string]LogEventLevel{
	_LogEventLevelName[0:12]:                   UnknownLevel,
	strings.ToLower(_LogEventLevelName[0:12]):  UnknownLevel,
	_LogEventLevelName[12:22]:                  DebugLevel,
	strings.ToLower(_LogEventLevelName[12:22]): DebugLevel,
	_LogEventLevelName[22:31]:                  InfoLevel,
	strings.ToLower(_LogEventLevelName[22:31]): InfoLevel,
	_LogEventLevelName[31:40]:                  WarnLevel,
	strings.ToLower(_LogEventLevelName[31:40]): WarnLevel,
	_LogEventLevelName[40:50]:                  ErrorLevel,
	strings.ToLower(_LogEventLevelName[40:50]): ErrorLevel,
	_LogEventLevelName[50:63]:                  CriticalLevel,
	strings.ToLower(_LogEventLevelName[50:63]): CriticalLevel,
}

// ParseLogEventLevel attempts to convert a string to a LogEventLevel
func ParseLogEventLevel(name string) (LogEventLevel, error) {
	if x, ok := _LogEventLevelValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _LogEventLevelValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return LogEventLevel(0), fmt.Errorf("%s is not a valid LogEventLevel", name)
}

// MarshalText implements the text marshaller method
func (x LogEventLevel) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *LogEventLevel) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseLogEventLevel(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
